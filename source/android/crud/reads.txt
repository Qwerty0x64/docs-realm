.. _android-realm-database-reads:

=====
Reads
=====

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

.. |ref-stored| replace:: :doc:`stored </android/crud/writes>`
.. |ref-read-characteristics| replace:: :ref:`read characteristics <android-realm-read-characteristics>`

.. include:: /client-guides/crud/reads/overview.rst

.. _android-read-from-realm:

Read from Realm Database
------------------------

.. |ref-sort-results| replace:: :ref:`sort <android-sort-results>`

.. include:: /client-guides/crud/reads/read-from-realm.rst

.. admonition:: About the examples on this page
   :class: note

   The examples on this page use the data model of a project management app that
   has two {+service-short+} object types: ``Project`` and ``Task``. A
   ``Project`` has zero or more ``Tasks``.

   See the schema for these two classes, ``Project`` and ``Task``, below:

   .. tabs-realm-languages::
   
      .. tab::
         :tabid: java
   
         .. literalinclude:: /examples/Schemas/ProjectAndTask.java
            :language: java
   
      .. tab::
         :tabid: kotlin
   
         .. literalinclude:: /examples/Schemas/ProjectAndTask.kt
            :language: kotlin

.. _android-get-all-objects:

Get All Objects
~~~~~~~~~~~~~~~

.. include:: /client-guides/crud/reads/get-all-objects.rst

.. example::

   In order to access all instances of ``Project`` and ``Task``, use the
   following syntax:

   .. tabs-realm-languages::
   
      .. tab::
         :tabid: java
   
         .. literalinclude:: /examples/CRUD/Objects.java
            :language: java
   
      .. tab::
         :tabid: kotlin
   
         .. literalinclude:: /examples/CRUD/Objects.kt
            :language: kotlin

.. _android-filter-results:

Filter Results
~~~~~~~~~~~~~~

.. include:: /client-guides/crud/reads/filter-results.rst

.. example::

   In the following example, we use the query
   engine's comparison operators to:

   - Find high priority tasks by comparing the value of the ``priority`` property value with a threshold number, above which priority can be considered high.
   - Find just-started or short-running tasks by seeing if the ``progressMinutes`` property falls within a certain range.
   - Find unassigned tasks by finding tasks where the ``assignee`` property is equal to null.
   - Find tasks assigned to specific teammates Ali or Jamie by seeing if the ``assignee`` property is in a list of names.

   .. tabs-realm-languages::
   
      .. tab::
         :tabid: java
   
         .. literalinclude:: /examples/Query/Comparison.java
            :language: java
   
      .. tab::
         :tabid: kotlin
   
         .. literalinclude:: /examples/Query/Comparison.kt
            :language: kotlin

.. _android-sort-results:

Sort Results
~~~~~~~~~~~~

.. include:: /client-guides/crud/reads/sort-results.rst

.. example::

   The following code sorts the projects by name in reverse
   alphabetical order (i.e. "descending" order).

   .. tabs-realm-languages::
   
      .. tab::
         :tabid: java
   
         .. literalinclude:: /examples/CRUD/Sort.java
            :language: java
   
      .. tab::
         :tabid: kotlin
   
         .. literalinclude:: /examples/CRUD/Sort.kt
            :language: kotlin


.. _android-realm-read-characteristics:

Read Characteristics
--------------------

.. include:: /client-guides/crud/reads/realm-read-characteristics.rst

.. _android-results-are-not-copies:

Results Are Not Copies
~~~~~~~~~~~~~~~~~~~~~~

.. include:: /client-guides/crud/reads/results-are-not-copies.rst

.. _android-results-are-lazy:

Results Are Lazy
~~~~~~~~~~~~~~~~

.. include:: /client-guides/crud/reads/results-are-lazy.rst

.. _android-references-retained:

References Are Retained
~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /client-guides/crud/reads/references-retained.rst

Summary
-------

- To read from {+client-database+}, first get all objects of a certain type from the {+realm+}, then filter using the query engine, then (optionally) sort the results.
- When you read, the results are not copies. Instead, through memory mapping, results point directly to the version on disk.
- Queries are lazily-evaluated.
